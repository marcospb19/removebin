#!/usr/bin/env bash


#                                __   _
#    _______ __ _  ___ _  _____ / /  (_)__
#   / __/ -_)  ' \/ _ \ |/ / -_) _ \/ / _ \
#  /_/  \__/_/_/_/\___/___/\__/_.__/_/_//_/
#


# Created main so i can reuse this code recursively
# when a directory is found, this way the script makes
# recursion on all folders, even if inside of folders

recursive=

list_of_files_to_remove=()

function recursive_main()
{
	for i in "$@"; do

		# For some reason "$i" with quotes doesn't work
		if [[ -d $i ]]; then
			recursive_main "$i"/*

		# If it's executable, check if binary

		# Perfomance note:
		# -x is faster than -f in a scenario where most files are not binary
		# If most of them are binary, -f is faster than -x

		elif [[ "$recursive" ]]; then
			if [[ -x $i ]]; then
				file -i $i                         | \
				grep "; charset=bin" > /dev/null  && \
				list_of_files_to_remove+=($i)     && \
				echo "Found  $i"
			fi
		fi
	done
}

for i in $@; do
	if [[ "$i" == "--recursive" || "$i" == "-R" ]]; then
		recursive="t" # true

	elif [[ "$i" == "--help" || "$i" == "-h" ]]; then
		echo "removebin it's very premature, i need to put time into this"
		echo
		echo "Usage:"
		echo "    removebin <Files>"
		echo "    removebin <Folders>"
		echo "    removebin <Files> <Folders>"
		echo "Flags:"
		echo "    Recursive: To search recursively in folders"
		echo "    removebin <Folders>         [-R|--recursive]"
		echo "    removebin <Folders> <Files> [-R|--recursive]"
		break
	fi
done

if [[ $USER == "root" ]]; then
	echo "Please avoid running \"removebin\" as root/sudo."
fi

# Fill list_of_files_to_remove
recursive_main $*

if [[ "${#list_of_files_to_remove[@]}" == 0 ]]; then
	echo "Binary files not found."
	exit 1
fi

echo "You are about to remove ${#list_of_files_to_remove[@]} binary files"
read -p 'Are you sure you want to proceed? (y/n) ' proceed


if [[ "$proceed" == "Y" || "$proceed" == "y" ]]; then
	for i in list_of_files_to_remove; do
		rm "$i"
	done
	echo "Exiting"

else
	echo "Aborting operation."
fi
