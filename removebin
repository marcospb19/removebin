#!/usr/bin/env sh
#                                __   _
#    _______ __ _  ___ _  _____ / /  (_)__
#   / __/ -_)  ' \/ _ \ |/ / -_) _ \/ / _ \
#  /_/  \__/_/_/_/\___/___/\__/_.__/_/_//_/
#
#  Remove binary files from folders
#  URL: https://github.com/marcospb19/removebin
#

if [ "$USER" = "root" ]; then
	echo "Please be careful with running \"removebin\" as root/sudo."
fi

show_help()
{
	cat <<- EOF

	    Usage:
	        removebin <Files>
	        removebin <Folders>
	        removebin <Files> <Folders>

	EOF
	exit 0
}

for arg in "$@"; do
	if [ "$arg" = "-h" ] || [ "$arg" = "--help"  ] || \
	   [ "$arg" = "-u" ] || [ "$arg" = "--usage" ]; then
		show_help
	fi
done

list_of_files_to_remove=""
number_of_files=0

add_to_list()
{
	# If it's executable, check if binary
	#
	# Perfomance note:
	# -x is faster than -f in a scenario where most files are not binary
	# If most of them are binary, -f is faster than -x

	if [ -x "$i" ]; then
		file -i "$i"                                           \
		| grep "-executable; charset=bin" > /dev/null           \
		&& list_of_files_to_remove="$list_of_files_to_remove $i" \
		&& number_of_files=$(( number_of_files + 1 ))             \
		&& echo "Found  $i"
	fi
}

search_in_folder()
{
	for i in "$1"/*; do
		if [ -d "$i" ]; then
			search_in_folder "$i"
		else
			add_to_list "$i"
		fi
	done
}

# Call on the same directory
if [ "$#" = 0 ]; then
	search_in_folder "$(pwd)"
else
	for i in "$@"; do
		if [ -d "$i" ]; then
			search_in_folder "$i"
		else
			add_to_list "$i"
		fi
	done
fi

if [ "$number_of_files" = 0 ]; then
	echo "No binary files found."
	exit 0
fi

echo
echo "$number_of_files binary files found."
printf "Remove? (y/N) "
read -r proceed


if [ "$proceed" = "Y" ] || [ "$proceed" = "y" ]; then
	for i in $list_of_files_to_remove; do
		rm "$i"
	done

	if [ "$number_of_files" = 1 ]; then
		echo "Done, $number_of_files file removed."
	else
		echo "Done, $number_of_files files removed."
	fi

else
	echo "Aborting operation."
fi
